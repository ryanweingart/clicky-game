{"version":3,"sources":["components/Cards/Cards.js","components/Nav/Nav.js","components/Title/Title.js","components/Wrapper/Wrapper.js","Container.js","Row.js","Column.js","App.js","serviceWorker.js","index.js"],"names":["Cards","props","className","value","id","onClick","handleClick","alt","name","src","image","Nav","href","title","winOrLose","score","highScore","Title","children","Wrapper","Container","fluid","Row","Column","size","split","map","join","App","state","images","clicked","indexOf","handleIncrement","setState","concat","handleReset","newScore","handleShuffle","shuffledImages","array","i","length","j","Math","floor","random","shuffleImages","this","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.92392bca.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Cards.css\";\n\nconst Cards = props => (\n    <div\n        className=\"card\"\n        value={props.id}\n        onClick={() => props.handleClick(props.id)}\n    >\n        <div className=\"img-container\">\n            <img alt={props.name} src={props.image} />\n        </div>\n    </div>\n);\n\nexport default Cards;","import React from \"react\";\nimport \"./Nav.css\";\n\nconst Nav = props => (\n    <nav>\n        <ul>\n            <li className=\"brand animated lightSpeedIn\">\n                <a href=\"/clicky-game/\">{props.title}</a>\n            </li>\n\n            <li id=\"winOrLose\">{props.winOrLose}</li>\n\n            <li id=\"score\">Score: {props.score}</li>\n\n            <li id=\"highScore\">High Score: {props.highScore}</li>\n        </ul>\n    </nav>\n);\n\nexport default Nav;","import React from \"react\";\nimport \"./Title.css\";\n\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\n\nexport default Title;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\n\nconst Container = props =>\n  <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>\n    {props.children}\n  </div>;\n\nexport default Container;","import React from \"react\";\n\nconst Row = props =>\n  <div className={`row${props.fluid ? \"-fluid\" : \"\"}`}>\n    {props.children}\n  </div>;\n\nexport default Row;","import React from \"react\";\n\nconst Column = props => {\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\n  return (\n    <div className={size}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Column;","import React, { Component } from \"react\";\nimport Cards from \"./components/Cards\";\nimport Nav from \"./components/Nav\";\nimport Title from \"./components/Title\";\nimport Wrapper from \"./components/Wrapper\";\nimport Container from \"./Container\";\nimport Row from \"./Row\";\nimport Column from \"./Column\";\nimport images from \"./images.json\";\nimport \"./App.css\";\n\nfunction shuffleImages(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nclass App extends Component {\n  state = {\n    images,\n    score: 0,\n    highScore: 0,\n    winOrLose: \"\",\n    clicked: []\n  };\n \n  handleClick = id => {\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.handleIncrement();\n      this.setState({ clicked: this.state.clicked.concat(id) });\n    } else {\n      this.handleReset();\n    }\n  };\n\n  handleIncrement = () => {\n    const newScore = this.state.score + 1;\n\n    this.setState({\n      score: newScore,\n      winOrLose: \"\"\n    });\n\n    if (newScore === 12) {\n      this.setState({ highScore: newScore});\n\n      this.setState({ winOrLose: \"You Win!\"});\n    } \n  //   if (newScore >= this.state.highScore) {\n  //     this.setState({ highScore: newScore});\n  //   } else if (newScore === 12) {\n  //     this.setState({ winOrLose: \"You Win!\"});\n  //   } \n    this.handleShuffle();\n  };\n\n  handleReset = () => {\n    this.setState({\n      score: 0,\n      highScore: this.state.highScore,\n      winOrLose: \"You Lose!\",\n      clicked: []\n    });\n    this.handleShuffle();\n  };\n\n  handleShuffle = () => {\n    let shuffledImages = shuffleImages(images);\n    this.setState({ images: shuffledImages});\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Nav\n          title=\"Web Development Clicky Game\"\n          score={this.state.score}\n          highScore={this.state.highScore}\n          winOrLose={this.state.winOrLose}\n        />\n\n        <Title>\n          The goal of this memorization game is to click each image only once until you get to 12 points. If you hit an image more than once, you lose!\n        </Title>\n\n        <Container>\n          <Row>\n            {this.state.images.map(image => (\n              <Column size=\"md-3 sm-6\">\n                <Cards\n                  key={image.id}\n                  handleClick={this.handleClick}\n                  handleIncrement={this.handleIncrement}\n                  handleReset={this.handleReset}\n                  handleShuffle={this.handleShuffle}\n                  id={image.id}\n                  image={image.image}\n                />\n              </Column>\n            ))}\n          </Row>\n        </Container>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}